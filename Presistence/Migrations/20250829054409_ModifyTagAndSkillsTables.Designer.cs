// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Presistence.Data;

#nullable disable

namespace Presistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250829054409_ModifyTagAndSkillsTables")]
    partial class ModifyTagAndSkillsTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DomainLayer.Models.CareerOutcome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Outcome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RoadMapId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoadMapId");

                    b.ToTable("CareerOutcomes");
                });

            modelBuilder.Entity("DomainLayer.Models.FocusArea", b =>
                {
                    b.Property<int>("FocusAreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FocusAreaId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FocusAreaId");

                    b.ToTable("FocusAreas");
                });

            modelBuilder.Entity("DomainLayer.Models.GainedSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("GainedSkills");
                });

            modelBuilder.Entity("DomainLayer.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("DomainLayer.Models.Mentor", b =>
                {
                    b.Property<int>("MentorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MentorId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("MentorId");

                    b.ToTable("Mentors");
                });

            modelBuilder.Entity("DomainLayer.Models.PasswordReset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ResetCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("Email", "ResetCode");

                    b.ToTable("PasswordResets");
                });

            modelBuilder.Entity("DomainLayer.Models.Phase", b =>
                {
                    b.Property<string>("PhaseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Month")
                        .HasColumnType("int");

                    b.Property<int>("RoadMapId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Weeks")
                        .HasColumnType("int");

                    b.HasKey("PhaseId");

                    b.HasIndex("RoadMapId");

                    b.ToTable("Phases");
                });

            modelBuilder.Entity("DomainLayer.Models.Prerequisite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Requirement")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Prerequisites");
                });

            modelBuilder.Entity("DomainLayer.Models.Rate", b =>
                {
                    b.Property<int>("TraineeId")
                        .HasColumnType("int");

                    b.Property<int>("MentorId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("TraineeId", "MentorId");

                    b.HasIndex("MentorId");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("DomainLayer.Models.RecommendedCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhaseId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PhaseId");

                    b.ToTable("RecommendedCourses");
                });

            modelBuilder.Entity("DomainLayer.Models.RoadMap", b =>
                {
                    b.Property<int>("RoadMapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoadMapId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Total_Hours")
                        .HasColumnType("int");

                    b.Property<int>("Total_Months")
                        .HasColumnType("int");

                    b.Property<int>("TraineeId")
                        .HasColumnType("int");

                    b.HasKey("RoadMapId");

                    b.HasIndex("TraineeId")
                        .IsUnique();

                    b.ToTable("RoadMaps");
                });

            modelBuilder.Entity("DomainLayer.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("DomainLayer.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("DomainLayer.Models.Trainee", b =>
                {
                    b.Property<int>("TraineeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TraineeId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsSubscribed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int?>("MentorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PictureUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TraineeId");

                    b.HasIndex("MentorId");

                    b.ToTable("Trainees");
                });

            modelBuilder.Entity("FocusAreaTrainee", b =>
                {
                    b.Property<int>("FocusAreasFocusAreaId")
                        .HasColumnType("int");

                    b.Property<int>("TraineesTraineeId")
                        .HasColumnType("int");

                    b.HasKey("FocusAreasFocusAreaId", "TraineesTraineeId");

                    b.HasIndex("TraineesTraineeId");

                    b.ToTable("TraineeFocusAreas", (string)null);
                });

            modelBuilder.Entity("GainedSkillPhase", b =>
                {
                    b.Property<string>("PhasesPhaseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Skills_GainedId")
                        .HasColumnType("int");

                    b.HasKey("PhasesPhaseId", "Skills_GainedId");

                    b.HasIndex("Skills_GainedId");

                    b.ToTable("PhaseGainedSkills", (string)null);
                });

            modelBuilder.Entity("LanguageTrainee", b =>
                {
                    b.Property<int>("PreferredLanguagesLanguageId")
                        .HasColumnType("int");

                    b.Property<int>("TraineesTraineeId")
                        .HasColumnType("int");

                    b.HasKey("PreferredLanguagesLanguageId", "TraineesTraineeId");

                    b.HasIndex("TraineesTraineeId");

                    b.ToTable("TraineeLanguages", (string)null);
                });

            modelBuilder.Entity("MentorSkill", b =>
                {
                    b.Property<int>("MentorsMentorId")
                        .HasColumnType("int");

                    b.Property<int>("SkillsId")
                        .HasColumnType("int");

                    b.HasKey("MentorsMentorId", "SkillsId");

                    b.HasIndex("SkillsId");

                    b.ToTable("MentorSkills", (string)null);
                });

            modelBuilder.Entity("MentorTag", b =>
                {
                    b.Property<int>("MentorsMentorId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("MentorsMentorId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("MentorTags", (string)null);
                });

            modelBuilder.Entity("PhasePrerequisite", b =>
                {
                    b.Property<string>("PhasesPhaseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PrerequisitesId")
                        .HasColumnType("int");

                    b.HasKey("PhasesPhaseId", "PrerequisitesId");

                    b.HasIndex("PrerequisitesId");

                    b.ToTable("PhasePrerequisites", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Models.CareerOutcome", b =>
                {
                    b.HasOne("DomainLayer.Models.RoadMap", "RoadMap")
                        .WithMany("Career_Outcomes")
                        .HasForeignKey("RoadMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoadMap");
                });

            modelBuilder.Entity("DomainLayer.Models.Phase", b =>
                {
                    b.HasOne("DomainLayer.Models.RoadMap", "RoadMap")
                        .WithMany("Phases")
                        .HasForeignKey("RoadMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoadMap");
                });

            modelBuilder.Entity("DomainLayer.Models.Rate", b =>
                {
                    b.HasOne("DomainLayer.Models.Mentor", "Mentor")
                        .WithMany("Rates")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Models.Trainee", "Trainee")
                        .WithMany("Rates")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("DomainLayer.Models.RecommendedCourse", b =>
                {
                    b.HasOne("DomainLayer.Models.Phase", "Phase")
                        .WithMany("Recommended_Courses")
                        .HasForeignKey("PhaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Phase");
                });

            modelBuilder.Entity("DomainLayer.Models.RoadMap", b =>
                {
                    b.HasOne("DomainLayer.Models.Trainee", "Trainee")
                        .WithOne("RoadMap")
                        .HasForeignKey("DomainLayer.Models.RoadMap", "TraineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("DomainLayer.Models.Trainee", b =>
                {
                    b.HasOne("DomainLayer.Models.Mentor", "Mentor")
                        .WithMany("Trainees")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("FocusAreaTrainee", b =>
                {
                    b.HasOne("DomainLayer.Models.FocusArea", null)
                        .WithMany()
                        .HasForeignKey("FocusAreasFocusAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Models.Trainee", null)
                        .WithMany()
                        .HasForeignKey("TraineesTraineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GainedSkillPhase", b =>
                {
                    b.HasOne("DomainLayer.Models.Phase", null)
                        .WithMany()
                        .HasForeignKey("PhasesPhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Models.GainedSkill", null)
                        .WithMany()
                        .HasForeignKey("Skills_GainedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LanguageTrainee", b =>
                {
                    b.HasOne("DomainLayer.Models.Language", null)
                        .WithMany()
                        .HasForeignKey("PreferredLanguagesLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Models.Trainee", null)
                        .WithMany()
                        .HasForeignKey("TraineesTraineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MentorSkill", b =>
                {
                    b.HasOne("DomainLayer.Models.Mentor", null)
                        .WithMany()
                        .HasForeignKey("MentorsMentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Models.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MentorTag", b =>
                {
                    b.HasOne("DomainLayer.Models.Mentor", null)
                        .WithMany()
                        .HasForeignKey("MentorsMentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhasePrerequisite", b =>
                {
                    b.HasOne("DomainLayer.Models.Phase", null)
                        .WithMany()
                        .HasForeignKey("PhasesPhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Models.Prerequisite", null)
                        .WithMany()
                        .HasForeignKey("PrerequisitesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainLayer.Models.Mentor", b =>
                {
                    b.Navigation("Rates");

                    b.Navigation("Trainees");
                });

            modelBuilder.Entity("DomainLayer.Models.Phase", b =>
                {
                    b.Navigation("Recommended_Courses");
                });

            modelBuilder.Entity("DomainLayer.Models.RoadMap", b =>
                {
                    b.Navigation("Career_Outcomes");

                    b.Navigation("Phases");
                });

            modelBuilder.Entity("DomainLayer.Models.Trainee", b =>
                {
                    b.Navigation("Rates");

                    b.Navigation("RoadMap");
                });
#pragma warning restore 612, 618
        }
    }
}
